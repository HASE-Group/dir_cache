//
// Project:	Scalable Coherent Interface
// Entity	Network
// File		network.hase
// Date:	Aug 2005
// Author:	Roland Ibbett, based on an earlier version by Max Magliana

$class_decls

bool send_to_memory, send_to_cache;
bool mem_r_busy, mem_w_busy;
bool send_to_mem;
bool cache1_busy, cache2_busy, cache3_busy, cache4_busy;
bool done, time_out;
int i, clock_cycle;

net_struct pkt_in, pkt_to_mem, pkt_from_mem;
net_struct mem_pkt, pkt_to_cache1, pkt_to_cache2, pkt_to_cache3, pkt_to_cache4;

q_struct Mqueue[4];
q_struct C1queue[4];
q_struct C2queue[4];
q_struct C3queue[4];
q_struct C4queue[4];

int orig_proc;

void add_to_Mqueue();
void add_to_Cqueue();

$class_defs

void network::add_to_Mqueue(){
	  if (Mqueue[3].valid == 0)
	   {
		strcpy(Mqueue[3].instr,pkt_in.instr);
		Mqueue[3].addr = pkt_in.addr;
		Mqueue[3].dest = pkt_in.dest;
		Mqueue[3].source = pkt_in.source;
		Mqueue[3].pointer = pkt_in.pointer;
		Mqueue[3].valid = 1;
	   }
	  else if ((Mqueue[3].valid == 1) && (Mqueue[2].valid == 0))
	   {
		strcpy(Mqueue[2].instr,pkt_in.instr);
		Mqueue[2].addr = pkt_in.addr;
		Mqueue[2].dest = pkt_in.dest;
		Mqueue[2].source = pkt_in.source;
		Mqueue[2].pointer = pkt_in.pointer;
		Mqueue[2].valid = 1;
	   }
	  else if ((Mqueue[3].valid == 1) && (Mqueue[2].valid == 1)
	   && (Mqueue[1].valid == 0))
	   {
		strcpy(Mqueue[1].instr,pkt_in.instr);
		Mqueue[1].addr = pkt_in.addr;
		Mqueue[1].dest = pkt_in.dest;
		Mqueue[1].source = pkt_in.source;
		Mqueue[1].pointer = pkt_in.pointer;
		Mqueue[1].valid = 1;
	   }
	  else if ((Mqueue[3].valid == 1) && (Mqueue[2].valid == 1)
	   && (Mqueue[1].valid == 1) && (Mqueue[0].valid == 0))
	   {
		strcpy(Mqueue[0].instr,pkt_in.instr);
		Mqueue[0].addr = pkt_in.addr;
		Mqueue[0].dest = pkt_in.dest;
		Mqueue[0].source = pkt_in.source;
		Mqueue[0].pointer = pkt_in.pointer;
		Mqueue[0].valid = 1;
	   }
}

void network::add_to_Cqueue(){

	if (pkt_in.dest == 1)
	 {
	  if (C1queue[3].valid == 0)
	   {
		strcpy(C1queue[3].instr,pkt_in.instr);
		C1queue[3].addr = pkt_in.addr;
		C1queue[3].dest = pkt_in.dest;
		C1queue[3].source = pkt_in.source;
		C1queue[3].pointer = pkt_in.pointer;
		C1queue[3].valid = 1;
	   }
	  else if ((C1queue[3].valid == 1) && (C1queue[2].valid == 0))
	   {
		strcpy(C1queue[2].instr,pkt_in.instr);
		C1queue[2].addr = pkt_in.addr;
		C1queue[2].dest = pkt_in.dest;
		C1queue[2].source = pkt_in.source;
		C1queue[2].pointer = pkt_in.pointer;
		C1queue[2].valid = 1;
	   }
	  else if ((C1queue[3].valid == 1) && (C1queue[2].valid == 1)
	   && (C1queue[1].valid == 0))
	   {
		strcpy(C1queue[1].instr,pkt_in.instr);
		C1queue[1].addr = pkt_in.addr;
		C1queue[1].dest = pkt_in.dest;
		C1queue[1].source = pkt_in.source;
		C1queue[1].pointer = pkt_in.pointer;
		C1queue[1].valid = 1;
	   }
	  else if ((C1queue[3].valid == 1) && (C1queue[2].valid == 1)
	   && (C1queue[1].valid == 1) && (C1queue[0].valid == 0))
	   {
		strcpy(C1queue[0].instr,pkt_in.instr);
		C1queue[0].addr = pkt_in.addr;
		C1queue[0].dest = pkt_in.dest;
		C1queue[0].source = pkt_in.source;
		C1queue[0].pointer = pkt_in.pointer;
		C1queue[0].valid = 1;
	   }
	}

	else if (pkt_in.dest == 2)
	 {
	  if (C2queue[3].valid == 0)
	   {
		strcpy(C2queue[3].instr,pkt_in.instr);
		C2queue[3].addr = pkt_in.addr;
		C2queue[3].dest = pkt_in.dest;
		C2queue[3].source = pkt_in.source;
		C2queue[3].pointer = pkt_in.pointer;
		C2queue[3].valid = 1;
	   }
	  else if ((C2queue[3].valid == 1) && (C2queue[2].valid == 0))
	   {
		strcpy(C2queue[2].instr,pkt_in.instr);
		C2queue[2].addr = pkt_in.addr;
		C2queue[2].dest = pkt_in.dest;
		C2queue[2].source = pkt_in.source;
		C2queue[2].pointer = pkt_in.pointer;
		C2queue[2].valid = 1;
	   }
	  else if ((C2queue[3].valid == 1) && (C2queue[2].valid == 1)
	   && (C2queue[1].valid == 0))
	   {
		strcpy(C2queue[1].instr,pkt_in.instr);
		C2queue[1].addr = pkt_in.addr;
		C2queue[1].dest = pkt_in.dest;
		C2queue[1].source = pkt_in.source;
		C2queue[1].pointer = pkt_in.pointer;
		C2queue[1].valid = 1;
	   }
	  else if ((C2queue[3].valid == 1) && (C2queue[2].valid == 1)
	   && (C2queue[1].valid == 1) && (C2queue[0].valid == 0))
	   {
		strcpy(C2queue[0].instr,pkt_in.instr);
		C2queue[0].addr = pkt_in.addr;
		C2queue[0].dest = pkt_in.dest;
		C2queue[0].source = pkt_in.source;
		C2queue[0].pointer = pkt_in.pointer;
		C2queue[0].valid = 1;
	   }
	}

	else if (pkt_in.dest == 3)
	 {
	  if (C3queue[3].valid == 0)
	   {
		strcpy(C3queue[3].instr,pkt_in.instr);
		C3queue[3].addr = pkt_in.addr;
		C3queue[3].dest = pkt_in.dest;
		C3queue[3].source = pkt_in.source;
		C3queue[3].pointer = pkt_in.pointer;
		C3queue[3].valid = 1;
	   }
	  else if ((C3queue[3].valid == 1) && (C3queue[2].valid == 0))
	   {
		strcpy(C3queue[2].instr,pkt_in.instr);
		C3queue[2].addr = pkt_in.addr;
		C3queue[2].dest = pkt_in.dest;
		C3queue[2].source = pkt_in.source;
		C3queue[2].pointer = pkt_in.pointer;
		C3queue[2].valid = 1;
	   }
	  else if ((C3queue[3].valid == 1) && (C3queue[2].valid == 1)
	   && (C3queue[1].valid == 0))
	   {
		strcpy(C3queue[1].instr,pkt_in.instr);
		C3queue[1].addr = pkt_in.addr;
		C3queue[1].dest = pkt_in.dest;
		C3queue[1].source = pkt_in.source;
		C3queue[1].pointer = pkt_in.pointer;
		C3queue[1].valid = 1;
	   }
	  else if ((C3queue[3].valid == 1) && (C3queue[2].valid == 1)
	   && (C3queue[1].valid == 1) && (C3queue[0].valid == 0))
	   {
		strcpy(C3queue[0].instr,pkt_in.instr);
		C3queue[0].addr = pkt_in.addr;
		C3queue[0].dest = pkt_in.dest;
		C3queue[0].source = pkt_in.source;
		C3queue[0].pointer = pkt_in.pointer;
		C3queue[0].valid = 1;
	   }
	}

	else if (pkt_in.dest == 4)
	 {
	  if (C4queue[3].valid == 0)
	   {
		strcpy(C4queue[3].instr,pkt_in.instr);
		C4queue[3].addr = pkt_in.addr;
		C4queue[3].dest = pkt_in.dest;
		C4queue[3].source = pkt_in.source;
		C4queue[3].pointer = pkt_in.pointer;
		C4queue[3].valid = 1;
	   }
	  else if ((C4queue[3].valid == 1) && (C4queue[2].valid == 0))
	   {
		strcpy(C4queue[2].instr,pkt_in.instr);
		C4queue[2].addr = pkt_in.addr;
		C4queue[2].dest = pkt_in.dest;
		C4queue[2].source = pkt_in.source;
		C4queue[2].pointer = pkt_in.pointer;
		C4queue[2].valid = 1;
	   }
	  else if ((C4queue[3].valid == 1) && (C4queue[2].valid == 1)
	   && (C4queue[1].valid == 0))
	   {
		strcpy(C4queue[1].instr,pkt_in.instr);
		C4queue[1].addr = pkt_in.addr;
		C4queue[1].dest = pkt_in.dest;
		C4queue[1].source = pkt_in.source;
		C4queue[1].pointer = pkt_in.pointer;
		C4queue[1].valid = 1;
	   }
	  else if ((C4queue[3].valid == 1) && (C4queue[2].valid == 1)
	   && (C4queue[1].valid == 1) && (C4queue[0].valid == 0))
	   {
		strcpy(C4queue[0].instr,pkt_in.instr);
		C4queue[0].addr = pkt_in.addr;
		C4queue[0].dest = pkt_in.dest;
		C4queue[0].source = pkt_in.source;
		C4queue[0].pointer = pkt_in.pointer;
		C4queue[0].valid = 1;
	   }
	}
}

$pre

send_to_memory = false;
send_to_cache = false;
cache1_busy = false;
cache2_busy = false;
cache3_busy = false;
cache4_busy = false;

// initialise queues

		for (i=0; i < 4; i++)
		{
		Mqueue[i].valid = 0;
		C1queue[i].valid = 0;
		C2queue[i].valid = 0;
		C3queue[i].valid = 0;
		C4queue[i].valid = 0;
		}

$phase0

  sim_from_port M_Input(from_mem);	    
  sim_from_port C1_Input(from_cache1);
  sim_from_port C2_Input(from_cache2);
  sim_from_port C3_Input(from_cache3);
  sim_from_port C4_Input(from_cache4);

  if  (sim_waiting(ev, M_Input) > 0)
    {
	SIM_CAST(net_struct, pkt_in,ev);
	mem_r_busy = false;
	add_to_Cqueue();
     }

  if  (sim_waiting(ev, C1_Input) > 0)
   {
	SIM_CAST(net_struct, pkt_in,ev);
	if (pkt_in.dest==0)
	{add_to_Mqueue();}
	else 
	{add_to_Cqueue();}
   }

  if  (sim_waiting(ev, C2_Input) > 0)
   {
	SIM_CAST(net_struct, pkt_in,ev);
	if (pkt_in.dest==0)
	{add_to_Mqueue();}
	else 
	{add_to_Cqueue();}
   }

  if  (sim_waiting(ev, C3_Input) > 0)
   {
	SIM_CAST(net_struct, pkt_in,ev);
	if (pkt_in.dest==0)
	{add_to_Mqueue();}
	else 
	{add_to_Cqueue();}
   }

  if  (sim_waiting(ev, C4_Input) > 0)
   {
	SIM_CAST(net_struct, pkt_in,ev);
	if (pkt_in.dest==0)
	{add_to_Mqueue();}
	else 
	{add_to_Cqueue();}
   }

$phase1


// OUTPUT TO MEMORY

// if Mqueue[3] contains a valid entry and memory is free, copy entry
// to pkt_to_mem buffer and send to memory

  if ((Mqueue[3].valid == 1) && !mem_r_busy && !mem_w_busy)
   {
    strcpy(pkt_to_mem.instr,Mqueue[3].instr);
    pkt_to_mem.addr = Mqueue[3].addr;
    pkt_to_mem.dest = Mqueue[3].dest;
    pkt_to_mem.source = Mqueue[3].source;
    pkt_to_mem.pointer = Mqueue[3].pointer;
    send_NET_PKT(to_mem, pkt_to_mem);

    if  (strcmp(pkt_to_mem.instr,"RR")==0)
	{mem_r_busy = true;}
    if  (strcmp(pkt_to_mem.instr,"W")==0)
	{mem_w_busy = true;
	}

// Progress Mqueue 
	  for (i=3; i>=1; i--)
	   {
	    strcpy(Mqueue[i].instr, Mqueue[i-1].instr);
	    Mqueue[i].addr = Mqueue[i-1].addr;
	    Mqueue[i].dest = Mqueue[i-1].dest;
	    Mqueue[i].source = Mqueue[i-1].source;
	    Mqueue[i].pointer = Mqueue[i-1].pointer;
	    Mqueue[i].valid = Mqueue[i-1].valid;
	    if (Mqueue[i].valid == 1){
	    }
	   }
	    Mqueue[0].valid = 0;
   }

// OUTPUT TO CACHE 1

// if C1queue[3] contains a valid entry and cache1 is free, copy entry
// to pkt_to_cache1 buffer and send to cache1

	  if ((C1queue[3].valid == 1) && !cache1_busy)
	   {
	    strcpy(pkt_to_cache1.instr,C1queue[3].instr);
	    pkt_to_cache1.addr = C1queue[3].addr;
	    pkt_to_cache1.dest = C1queue[3].dest;
	    pkt_to_cache1.source = C1queue[3].source;
	    pkt_to_cache1.pointer = C1queue[3].pointer;
	    send_NET_PKT(to_cache1, pkt_to_cache1);

// Progress C1queue 
	  for (i=3; i>=1; i--)
	   {
	    strcpy(C1queue[i].instr, C1queue[i-1].instr);
	    C1queue[i].addr = C1queue[i-1].addr;
	    C1queue[i].dest = C1queue[i-1].dest;
	    C1queue[i].source = C1queue[i-1].source;
	    C1queue[i].pointer = C1queue[i-1].pointer;
	    C1queue[i].valid = C1queue[i-1].valid;
	   }
	    C1queue[0].valid = 0;
	}

// OUTPUT TO CACHE 2

// if C2queue[3] contains a valid entry and cache1 is free, copy entry
// to pkt_to_cache2 buffer and send to cache2

	  if ((C2queue[3].valid == 1) && !cache2_busy)
	   {
	    strcpy(pkt_to_cache2.instr,C2queue[3].instr);
	    pkt_to_cache2.addr = C2queue[3].addr;
	    pkt_to_cache2.dest = C2queue[3].dest;
	    pkt_to_cache2.source = C2queue[3].source;
	    pkt_to_cache2.pointer = C2queue[3].pointer;
	    send_NET_PKT(to_cache2, pkt_to_cache2);

// Progress C2queue 
	  for (i=3; i>=1; i--)
	   {
	    strcpy(C2queue[i].instr, C2queue[i-1].instr);
	    C2queue[i].addr = C2queue[i-1].addr;
	    C2queue[i].dest = C2queue[i-1].dest;
	    C2queue[i].source = C2queue[i-1].source;
	    C2queue[i].pointer = C2queue[i-1].pointer;
	    C2queue[i].valid = C2queue[i-1].valid;
	   }
	    C2queue[0].valid = 0;
	}

// OUTPUT TO CACHE 3

// if C3queue[3] contains a valid entry and cache1 is free, copy entry
// to pkt_to_cache3 buffer and send to cache3

	  if ((C3queue[3].valid == 1) && !cache3_busy)
	   {
	    strcpy(pkt_to_cache3.instr,C3queue[3].instr);
	    pkt_to_cache3.addr = C3queue[3].addr;
	    pkt_to_cache3.dest = C3queue[3].dest;
	    pkt_to_cache3.source = C3queue[3].source;
	    pkt_to_cache3.pointer = C3queue[3].pointer;
	    send_NET_PKT(to_cache3, pkt_to_cache3);

// Progress C3queue 
	  for (i=3; i>=1; i--)
	   {
	    strcpy(C3queue[i].instr, C3queue[i-1].instr);
	    C3queue[i].addr = C3queue[i-1].addr;
	    C3queue[i].dest = C3queue[i-1].dest;
	    C3queue[i].source = C3queue[i-1].source;
	    C3queue[i].pointer = C3queue[i-1].pointer;
	    C3queue[i].valid = C3queue[i-1].valid;
	   }
	    C3queue[0].valid = 0;
	}

// OUTPUT TO CACHE 4

// if C4queue[3] contains a valid entry and cache4 is free, copy entry
// to pkt_to_cache4 buffer and send to cache4

	  if ((C4queue[3].valid == 1) && !cache4_busy)
	   {
	    strcpy(pkt_to_cache4.instr,C4queue[3].instr);
	    pkt_to_cache4.addr = C4queue[3].addr;
	    pkt_to_cache4.dest = C4queue[3].dest;
	    pkt_to_cache4.source = C4queue[3].source;
	    pkt_to_cache4.pointer = C4queue[3].pointer;
	    send_NET_PKT(to_cache4, pkt_to_cache4);

// Progress C4queue 
	  for (i=3; i>=1; i--)
	   {
	    strcpy(C4queue[i].instr, C4queue[i-1].instr);
	    C4queue[i].addr = C4queue[i-1].addr;
	    C4queue[i].dest = C4queue[i-1].dest;
	    C4queue[i].source = C4queue[i-1].source;
	    C4queue[i].pointer = C4queue[i-1].pointer;
	    C4queue[i].valid = C4queue[i-1].valid;
	   }
	    C4queue[0].valid = 0;
	}

// stop simulation if nodes (processors and caches) have finished or if Max_Time_Steps exceeded

  if  (nodes_done==4)
   {done = true;}
  Max_Time_Left = Max_Time_Left - 20;
  if (Max_Time_Left <= 0)
   {time_out = true;}
 if (done || time_out)
   {stopSimulation(0);}

$report

if (done)
 {printf("Simulation complete \n");}

 if (time_out)
   {printf("Simulation timed out -> increase Max_Time_Left \n");}



