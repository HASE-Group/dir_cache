//
// Project:	Directory-based Coherence: central directory
// Entity	Memory
// File		memory.hase
// Date:	July 2006
// Author:	Roland Ibbett

// The Memory receives Read and Write requests from the caches.
// Each line in the Memory contains a data field and a directory
// entry for each cache. In principle, memory and cache lines could be
// longer than just one word.

$class_decls

bool send_to_network, pkt_sent;
bool update, update1, update2, update3, update4;
net_struct pkt_from_network;
net_struct pkt_to_network;
int addr, data_in;
int source, dest;
char instr[5];
mem_struct mem_buff;


void handle_read();
void handle_write();
void handle_invalidate();

$class_defs

void memory::handle_read(){

/* The Memory returns an RA packet to the requesting cache containing
the data and sets its directory entry for that cache (to 1).
*/
        pkt_to_network.addr = addr;
        pkt_to_network.data = data_mem[addr].data;
	pkt_to_network.dest = source;
	pkt_to_network.source = 0;
	strcpy(pkt_to_network.instr,"RA");
	send_to_network = true;

	mem_buff.data = data_mem[addr].data;
	mem_buff.entry1 = data_mem[addr].entry1;
	mem_buff.entry2 = data_mem[addr].entry2;
	mem_buff.entry3 = data_mem[addr].entry3;
	mem_buff.entry4 = data_mem[addr].entry4;
	if (source == 1)
	 {mem_buff.entry1 = 1;}
	else if (source == 2)
	 {mem_buff.entry2 = 1;}
	else if (source == 3)
	 {mem_buff.entry3 = 1;}
	else if (source == 4)
	 {mem_buff.entry4 = 1;}
	data_mem.Update(addr,mem_buff);
}

void memory::handle_write(){

/* The actions that occur here are independent of the Cache Policy;
different actions occur, according to the policy, in phase1.
*/
	mem_buff.entry1 = data_mem[addr].entry1;
	mem_buff.entry2 = data_mem[addr].entry2;
	mem_buff.entry3 = data_mem[addr].entry3;
	mem_buff.entry4 = data_mem[addr].entry4;

	mem_buff.data   = data_mem[addr].data;	// allows for multi-word
	mem_buff.data   = data_in;		// cache blocks
        pkt_to_network.addr = addr;
	pkt_to_network.source = 0;

	  if (source == 1)
	   {
	    mem_buff.entry1 = 1;
	    if (mem_buff.entry2 == 1)
	       {update2 = true;}
	    if (mem_buff.entry3 == 1)
	       {update3 = true;}
	    if (mem_buff.entry4 == 1)
	       {update4 = true;}
	   }
	  else if (source == 2)
	   {
	    mem_buff.entry2 = 1;
	    if (mem_buff.entry1 == 1)
	       {update1 = true;}
	    if (mem_buff.entry3 == 1)
	       {update3 = true;}
	    if (mem_buff.entry4 == 1)
	       {update4 = true;}
	   }
	  else if (source == 3)
	   {
	    mem_buff.entry3 = 1;
	    if (mem_buff.entry1 == 1)
	       {update1 = true;}
	    if (mem_buff.entry2 == 1)
	       {update2 = true;}
	    if (mem_buff.entry4 ==  1)
	       {update4 = true;}
	   }
	  else if (source == 4)
	   {
	    mem_buff.entry4 = 1;
	    if (mem_buff.entry1 == 1)
	       {update1 = true;}
	    if (mem_buff.entry2 == 1)
	       {update2 = true;}
	    if (mem_buff.entry3 == 1)
	       {update3 = true;}
	   }
	  data_mem.Update(addr,mem_buff);
	  update = true;
}

void memory::handle_invalidate(){

/* A cache has experienced a collision miss, i.e. it needs to use a
line for a different address from the one in the line required by a
new request. The Memory sets its directory entry for that cache to 0
and sends an Invalidate Acknowledge packet back to the requesting
cache.
*/
	mem_buff.data   = data_mem[addr].data;
	mem_buff.entry1 = data_mem[addr].entry1;
	mem_buff.entry2 = data_mem[addr].entry2;
	mem_buff.entry3 = data_mem[addr].entry3;
	mem_buff.entry4 = data_mem[addr].entry4;
	if (source == 1)
	 {mem_buff.entry1 = 0;}
	if (source == 2)
	 {mem_buff.entry2 = 0;}
	if (source == 3)
	 {mem_buff.entry3 = 0;}
	if (source == 4)
	 {mem_buff.entry4 = 0;}
	data_mem.Update(addr,mem_buff);

	pkt_to_network.addr = addr;
	pkt_to_network.data = 0;
	pkt_to_network.source = 0;
	pkt_to_network.dest = source;
	strcpy(pkt_to_network.instr,"IA");
	send_to_network = true;
}

$pre

  send_to_network = false;
  pkt_sent = false;
  update1 = false;
  update2 = false;
  update3 = false;
  update4 = false;

  my_state = MEMORY_IDLE;
  dump_state();

$phase0

  sim_from_port Input(from_network);	    

  if  (sim_waiting(ev, Input) > 0)
   {
	my_state = MEMORY_BUSY;
	dump_state();
	SIM_CAST_DEL(net_struct,pkt_from_network,ev);

	 strcpy(instr, pkt_from_network.instr);		
	 addr = pkt_from_network.addr;
	 data_in = pkt_from_network.data;
	 dest = pkt_from_network.dest;
	 source = pkt_from_network.source;

	  if (strcmp(instr,"RR")==0)
	   {
	    handle_read();
	   }

	 else if ((strcmp(instr,"WR")==0) || (strcmp(instr,"WU")==0))
	   {
	    handle_write();
	   }

	 else if (strcmp(instr,"IV")==0)
	   {
	    handle_invalidate();
	   }
   }

$phase1

  if (send_to_network)
  {
	send_NET_PKT(to_network,pkt_to_network);
	send_to_network = false;
	my_state = MEMORY_IDLE;
	dump_state();
  }

/* The actions that occur here depend on whether the Cache Policy is
set to Update or Invalidate.
For both Writes and Invalidates, the Memory needs to send 0-3 packets,
depending on directory entries, 1 per clock. During this time the
Memory remains busy to prevent new requests from arriving.
 */

  if (update && (!update1 && !update2 && !update3 && !update4))
	{
	 strcpy(pkt_to_network.instr,"WA");
	 pkt_to_network.dest = source;
	 if (strcmp(instr,"WR") == 0)
          {pkt_to_network.data = mem_buff.data;}
	 else
	 {pkt_to_network.data = 0;}
	 send_NET_PKT(to_network,pkt_to_network);
	 update = false;
	 my_state = MEMORY_IDLE;
	 dump_state();
	}

  if (update1)
  {
	if (Cache_Policy == 0)	// Update
	 {
	  strcpy(pkt_to_network.instr,"UD");
          pkt_to_network.data = mem_buff.data;
	 }
	else			// Invalidate
	 {
	  mem_buff.entry1 = 0;
	  data_mem.Update(addr,mem_buff);
	  dump_state();
	  strcpy(pkt_to_network.instr,"IV");
          pkt_to_network.data = 0;
	 }
	pkt_to_network.dest = 1;
	send_NET_PKT(to_network,pkt_to_network);
	pkt_sent = true;
	update1 = false;
  }


  if (update2 && !pkt_sent)
   {
	if (Cache_Policy == 0)	// Update
	 {
	  strcpy(pkt_to_network.instr,"UD");
          pkt_to_network.data = mem_buff.data;
	 }
	else			// Invalidate
	 {
	  mem_buff.entry2 = 0;
	  data_mem.Update(addr,mem_buff);
	  dump_state();
	  strcpy(pkt_to_network.instr,"IV");
          pkt_to_network.data = 0;
	 }
	pkt_to_network.dest = 2;
	send_NET_PKT(to_network,pkt_to_network);
	pkt_sent = true;
	update2 = false;
   }

  if (update3 && !pkt_sent)
   {
	if (Cache_Policy == 0)	// Update
	 {
	  strcpy(pkt_to_network.instr,"UD");
          pkt_to_network.data = mem_buff.data;
	 }
	else			// Invalidate
	 {
	  mem_buff.entry3 = 0;
	  data_mem.Update(addr,mem_buff);
	  dump_state();
	  strcpy(pkt_to_network.instr,"IV");
          pkt_to_network.data = 0;
	 }
	pkt_to_network.dest = 3;
	send_NET_PKT(to_network,pkt_to_network);
	pkt_sent = true;
	update3 = false;
   }

  if (update4 && !pkt_sent)
   {
	if (Cache_Policy == 0)	// Update
	 {
	  strcpy(pkt_to_network.instr,"UD");
          pkt_to_network.data = mem_buff.data;
	 }
	else			// Invalidate
	 {
	  mem_buff.entry4 = 0;
	  data_mem.Update(addr,mem_buff);
	  dump_state();
          pkt_to_network.data = 0;
	  strcpy(pkt_to_network.instr,"IV");
	 }
	pkt_to_network.dest = 4;
	send_NET_PKT(to_network,pkt_to_network);
	pkt_sent = true;
	update4 = false;
   }

  pkt_sent = false;

